{"version":3,"file":"is.js","sourceRoot":"","sources":["../../src/is.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,SAAgB,OAAO,CAAC,GAAQ;IAC5B,QAAQ,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACzC,KAAK,gBAAgB;YACjB,OAAO,IAAI,CAAC;QAChB,KAAK,oBAAoB;YACrB,OAAO,IAAI,CAAC;QAChB,KAAK,uBAAuB;YACxB,OAAO,IAAI,CAAC;QAChB;YACI,OAAO,GAAG,YAAY,KAAK,CAAC;KACnC;AACL,CAAC;AAXD,0BAWC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,GAAQ;IACjC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,qBAAqB,CAAC;AACzE,CAAC;AAFD,oCAEC;AAGD;;;;;;GAMG;AACH,SAAgB,UAAU,CAAC,GAAQ;IAC/B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,mBAAmB,CAAC;AACvE,CAAC;AAFD,gCAEC;AAGD;;;;;;GAMG;AACH,SAAgB,cAAc,CAAC,GAAQ;IACnC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,uBAAuB,CAAC;AAC3E,CAAC;AAFD,wCAEC;AAED;;;;;;GAMG;AACH,SAAgB,WAAW,CAAC,GAAQ;IAChC,OAAO,GAAG,KAAK,KAAK,CAAC,CAAC;AAC1B,CAAC;AAFD,kCAEC;AAED;;;;;;GAMG;AACH,SAAgB,UAAU,CAAC,GAAQ;IAC/B,OAAO,OAAO,GAAG,KAAK,UAAU,CAAC;AACrC,CAAC;AAFD,gCAEC;AAED;;;;;;GAMG;AACH,SAAgB,QAAQ,CAAC,GAAQ;IAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC;AACrE,CAAC;AAFD,4BAEC;AAED;;;;;;GAMG;AACH,SAAgB,OAAO,CAAC,GAAQ;IAC5B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,gBAAgB,CAAC;AACpE,CAAC;AAFD,0BAEC;AAED;;;;;;GAMG;AACH,SAAgB,aAAa,CAAC,GAAQ;IAClC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC;AACrE,CAAC;AAFD,sCAEC;AAED;;;;;;GAMG;AACH,SAAgB,QAAQ,CAAC,GAAQ;IAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC;AACrE,CAAC;AAFD,4BAEC;AAED;;;;;;GAMG;AACH,SAAgB,KAAK,CAAC,GAAQ;IAC1B,OAAO,GAAG,KAAK,GAAG,CAAC;AACvB,CAAC;AAFD,sBAEC","sourcesContent":["/**\r\n * Checks whether given value's type is one of a few Error or Error-like\r\n * {@link isError}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isError(wat: any): boolean {\r\n    switch (Object.prototype.toString.call(wat)) {\r\n        case '[object Error]':\r\n            return true;\r\n        case '[object Exception]':\r\n            return true;\r\n        case '[object DOMException]':\r\n            return true;\r\n        default:\r\n            return wat instanceof Error;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is ErrorEvent\r\n * {@link isErrorEvent}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isErrorEvent(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\r\n}\r\n\r\n\r\n/**\r\n * Checks whether given value's type is DOMError\r\n * {@link isDOMError}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isDOMError(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object DOMError]';\r\n}\r\n\r\n\r\n/**\r\n * Checks whether given value's type is DOMException\r\n * {@link isDOMException}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isDOMException(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object DOMException]';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is an undefined\r\n * {@link isUndefined}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isUndefined(wat: any): boolean {\r\n    return wat === void 0;\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is a function\r\n * {@link isFunction}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isFunction(wat: any): boolean {\r\n    return typeof wat === 'function';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is a string\r\n * {@link isString}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isString(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object String]';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is an array\r\n * {@link isArray}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isArray(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object Array]';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is an object literal\r\n * {@link isPlainObject}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isPlainObject(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is an regexp\r\n * {@link isRegExp}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isRegExp(wat: any): boolean {\r\n    return Object.prototype.toString.call(wat) === '[object RegExp]';\r\n}\r\n\r\n/**\r\n * Checks whether given value's type is a NaN\r\n * {@link isNaN}.\r\n *\r\n * @param wat A value to be checked.\r\n * @returns A boolean representing the result.\r\n */\r\nexport function isNaN(wat: any): boolean {\r\n    return wat !== wat;\r\n}\r\n"]}